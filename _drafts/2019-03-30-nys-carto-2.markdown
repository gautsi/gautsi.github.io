---
layout: post
title:  "NYS Counties Cartogram Part 2"
date:   2019-03-23
categories: post
---

In [part 1]({% post_url 2019-03-23-nys-carto %}), I talked about why I felt the following map doesn't accurately convey the results of the election:

<img src="/assets/nyt_nys_ag_dp_2018_map_033019.png" height="60%" width="60%" border="1">{: .center-image }

and showed this bar chart as an alternative that better shows the popular vote result but loses geographic relationships amongst the counties:

<div id="bar2" style="position:relative;" >
</div>

Researching other ways to represent geographic objects brought me to the concept of a cartogram. According to Wikipedia, a cartogram is a ...

There are many different ways to choose and organize the marks in a cartogram. Here is a paper that looks at various methods and compares by expressiveness and effectiveness of communicating geographic and other values...

For a cartogram of the election, the shape of a county didn't need preserving but rather its position in the state and relative to other counties. So perhaps we could first represent each county by a square, and then fill each square with representations of candidate vote totals in the county. All squares could be equal in size, so that no county occupies more space on the canvas than any other. But where do we place the county squares? The locations of the squares overall and relative to the other squares are how we will communicate the geographical structures in the data so we want to place them in geographically accurate positions.

One way we could place the squares is to center them on the centroids of the county shapes. The next sketch shows the counties, their centroids and squares centered at the centroids and lets you change the size of the squares. This seems like a reasonable way to place square, except that depending on the size of the square they overalap. Overlap is a problem for us because it can make easily see differences between properties of the county difficult. For the smallest square size of 5, there is no overlap but the squares are also prohibitively small to place other marks in. For larger square sizes like 20, there is overlap in various parts of the state, especially NYC.

<div id="markSelection" style="float:left;">
visual mark
  <select id="mark">
  		<option value="counties" selected="selected">counties</option>
  		<option value="centroids">centroids</option>
  		<option value="squares">squares</option>
  </select>
</div>

<div id="squareSizeSelection" style="overflow:hidden; padding-left:10px;">
square size
  <select id="squareSize">
    <option value="5">5</option>
    <option value="10">10</option>
		<option value="20" selected="selected">20</option>
    <option value="30">30</option>
    <option value="40">40</option>
  </select>
</div>

<div id="counties" style="position:relative;" >
</div>

How to remove overlap? The method I show here iterates through the marks, calculates overlaps and moves each mark away from overlapping marks and repeats until there is no more overlap left. For the sake of aesthetics, this movement is implemented as a repulsive force that overlapping marks apply on each other, plus friction to stop marks from moving too much once they no longer overlap. The algorithm handles rectangular marks of different sizes for a use case where the size or shape of marks represent some property.

I also add an attractive force to bring outlier marks closer in to reduce space between marks which in my idea for the election map would not be directly used and which might make comparison between counties a little more difficult. For each mark the three closest neighboring marks are identified (by distance between the edges of the marks) and pull the mark closer to them, as long as the mark is not already adjacent to one of them (because we don't want to introduce more overlaps!).

Since I'm resolving overlaps and spaces with made up repulsive and attractive forces between marks, I wonder if I could use d3's network force layout methods instead. I would need to add some kind of non-overlapping nodes constraint, maybe a minimum distance, but one that can handle rectangular nodes of different shapes and sizes. I'm not very familiar with these d3 functions so am not sure if this is easily implemented.


The below sketch shows the algorithm at work. Starting with a random arrangement of 10 rectangles of different sizes, the sketch shows how the positions of rectangles change after applying successive rounds of repulsive/attractive forces. The dark orange rectangles show the updating positions, while the light orange filled in rectangles show the original positions of the rectangles for comparison. The updating stops once the total velocity of all marks is below a low threshold, or the algorithm has run through a large number of iterations. With a small number of rectangles (in this case 10) that are allowed to move arbitrarily far apart from each other (including out of view), the algorithm usually finishes quickly (in this case usually within 100 iterations).

<div id="button" style="position:relative;" ></div>
<div id="carto2" style="position:relative;" ></div>

We see in the sketch that the algorithm tends to keep the rectangles in the same relative places as the original positions while spreading them out enough to remove overlaps. Single outliers might move far to be closer to neighbors but generally keep the same relative direction to the other rectangles. Multiple non-overlapping outliers that touch each other will not move however.

In the next and last [part]({% post_url 2019-03-30-nys-carto-3 %}) we will apply this algorithm to New York State county squares and attempt to build a visualization of the election that gives a good idea of candidate's relative popular votes while retaining some of the geographic information of the NYT map.


<script src="https://d3js.org/d3.v5.min.js"></script>
<script src="https://d3js.org/d3-selection-multi.v1.min.js"></script>

<script src="/sketches/carto/counties_bar2.js"></script>
<script src="/sketches/carto/counties.js"></script>
<script src="/sketches/carto/update.js"></script>
<script src="/sketches/carto/carto_d3_static.js"></script>

### Notes

- votes are from [here](https://www.elections.ny.gov/2018ElectionResults.html)

### To do
- [x] print status on carto calc sketch
- [ ] add counties/centriods/squares sketch
